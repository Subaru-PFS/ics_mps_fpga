/**
 * \file
 * \author Joshua Schoolcraft <jschoolc@jpl.nasa.gov>
 * \author Thomas A. Werne <thomas.a.werne@jpl.nasa.gov>
 * \brief
 *
 * \copyright
 * Copyright 2009-2014, by the California Institute of Technology.
 * ALL RIGHTS RESERVED.  United States Government Sponsorship
 * acknowledged. Any commercial use must be negotiated with the Office
 * of Technology Transfer at the California Institute of Technology.
 * \copyright
 * This software may be subject to U.S. export control laws and
 * regulations.  By accepting this document, the user agrees to comply
 * with all U.S. export laws and regulations.  User has the
 * responsibility to obtain export licenses, or other export authority
 * as may be required before exporting such information to foreign
 * countries or providing access to foreign persons.
 ********************************************************************/

#include "pfs_high_api.h"
#include "pfs_low_api.h"
#include "pfs_globals.h"
#include "pfs_translate.h"
#include "queue.h"

#include "xil_assert.h"

//#include <string.h>
#include <stdint.h>

/******************************************************************************/

static void enq_wr_cmd(QUEUE(motor_cmd) *q, uint32_t reg, uint32_t val);
static void enq_rd_cmd(QUEUE(motor_cmd) *q, uint32_t reg);

static void load_enables_dirs(QUEUE(motor_cmd) *q, uint8_t brd, uint8_t sect);
static void init_enables_dirs();
        
// takes the board from tcp command and converts to our board num/sector combo
static void board2sector(uint8_t tcp_board, uint32_t *board, uint32_t *sect);

/******************************************************************************/

uint8_t hk_done = 1;

hk_resp_info hk_data;

// The number of received responses during a HK command
static uint16_t hk_response_count;
// Flags to track recieved ADC values during a HK command
static uint8_t hk_adc_flags;


static motor_cmd wr_cmd = {.rnw = 0};
static motor_cmd rd_cmd = {.rnw = 1, .val = 0};

static uint64_t enables[NUM_SECTORS][BOARDS_PER_SECTOR];
static uint64_t dirs[NUM_SECTORS][BOARDS_PER_SECTOR];

/******************************************************************************/

int requeue_cal(QUEUE(motor_cmd) *q, const cal_cmd *cmd) {
    const cal_cmd_payload *pld;
    int i, sect;
    uint8_t board_count;
    uint64_t mtr_mask;

    init_enables_dirs();

    for (i = 0; i < cmd->hdr.ncmds; i++) {
        pld = cmd->pld + i;

        // get the converted board, sector
        board2sector(pld->board, &wr_cmd.board, &wr_cmd.sector);

        DBG_PRINTF(4, "CAL cobra %d (sm,lg: %d,%d)",
                pld->cobra, pld->mtr2_run, pld->mtr1_run);

        // 2.4mm motor
        if (pld->mtr2_run) {
            wr_cmd.motor = cobra2motor(wr_cmd.board, pld->cobra, 1);
            
            enq_wr_cmd(q, PFS_PERIOD_MIN, pld->mtr2_start);
            enq_wr_cmd(q, PFS_PERIOD_MAX, pld->mtr2_end);
            enq_wr_cmd(q, PFS_PERIOD_STP, 1);
            
            mtr_mask = cobra2mask(wr_cmd.board, pld->cobra, 1);
            enables[wr_cmd.sector][wr_cmd.board] |= mtr_mask;
                    
            if (pld->mtr2_dir) {
                dirs[wr_cmd.sector][wr_cmd.board] |= mtr_mask;
            }
        }
        
        // 3.4mm motor
        if (pld->mtr1_run) {
            wr_cmd.motor = cobra2motor(wr_cmd.board, pld->cobra, 0);
            
            enq_wr_cmd(q, PFS_PERIOD_MIN, pld->mtr1_start);
            enq_wr_cmd(q, PFS_PERIOD_MAX, pld->mtr1_end);
            enq_wr_cmd(q, PFS_PERIOD_STP, 1);
            
            mtr_mask = cobra2mask(wr_cmd.board, pld->cobra, 0);
            enables[wr_cmd.sector][wr_cmd.board] |= mtr_mask;
                    
            if (pld->mtr1_dir) {
                dirs[wr_cmd.sector][wr_cmd.board] |= mtr_mask;
            }
        }
    }

    // set runtimes and start calibrate
    wr_cmd.motor = CONTROL_MOTOR;
	for (sect = 0; sect < NUM_SECTORS; sect++){
        
        board_count = sectors[sect].board_count;
		for (i = 0; i < board_count; i++) {
			// Drive the boards in reverse order
			wr_cmd.board = board_count - i - 1;
			wr_cmd.sector = sect;
            
            load_enables_dirs(q, i, sect);
            enq_wr_cmd(q, PFS_CTRL_STEP_LEN, CAL_INTERLEAVE_TIME_US);
            enq_wr_cmd(q, PFS_CTRL_CAL_SLEEP, CAL_TIME_US);
            enq_wr_cmd(q, PFS_CTRL_CONTROL, 1<<PFS_CTRL_CAL_BIT);
		}
	}

    return 0;
}

/******************************************************************************/

int requeue_setf(QUEUE(motor_cmd) *q, const setf_cmd *cmd) {
    const setf_cmd_payload *pld;
    int i;

    for (i = 0; i < cmd->hdr.ncmds; i++) {
        pld = cmd->pld + i;

        // get the converted board, sector
        board2sector(pld->board, &wr_cmd.board, &wr_cmd.sector);
        
        DBG_PRINTF(4, "SETF cobra %d (sm:%d,%d)(lg:%d,%d)",
                pld->cobra, pld->mtr2_en, pld->mtr2_freq, 
                pld->mtr1_en, pld->mtr1_freq);
        
        // 2.4mm motor
        if (pld->mtr2_en) {
            wr_cmd.motor = cobra2motor(wr_cmd.board, pld->cobra, 1);
            
            enq_wr_cmd(q, PFS_PULSE_PERIOD, pld->mtr2_freq);
        }
        // 3.4mm motor
        if (pld->mtr1_en) {
            wr_cmd.motor = cobra2motor(wr_cmd.board, pld->cobra, 0);
            
            enq_wr_cmd(q, PFS_PULSE_PERIOD, pld->mtr1_freq);
        }
    }

    return 0;
}

/******************************************************************************/

int requeue_hk(QUEUE(motor_cmd) *q, const hk_cmd *cmd) {
    int cobr;
    
    // get the converted board, sector
    board2sector(cmd->hdr.ncmds, &rd_cmd.board, &rd_cmd.sector);
    
	// Clear old hk data
	memset(&hk_data, 0, sizeof(hk_data));

    hk_response_count = 0;
	hk_adc_flags = 0;
    
    DBG_PRINTF(8, "Hk brd:%d sect:%d", rd_cmd.board, rd_cmd.sector);

	// send reads for freq & current of each motor
    for (cobr = 0; cobr < MAX_COBRAS_PER_BOARD; cobr++) {
        rd_cmd.motor = cobra2motor(rd_cmd.board, cobr, 1);
        enq_rd_cmd(q, PFS_PULSE_PERIOD);
        enq_rd_cmd(q, PFS_RES_ADC);
        
        rd_cmd.motor = cobra2motor(rd_cmd.board, cobr, 0);
        enq_rd_cmd(q, PFS_PULSE_PERIOD);
        enq_rd_cmd(q, PFS_RES_ADC);
    }
	
	rd_cmd.motor = ADC_MOTOR;
    enq_rd_cmd(q, PFS_TEMP0_REG);
    enq_rd_cmd(q, PFS_TEMP1_REG);
    enq_rd_cmd(q, PFS_VOLTAGE_REG);

	hk_done = 0;
	
    return 0;
}

/******************************************************************************/

int requeue_run(QUEUE(motor_cmd) *q, const run_cmd *cmd) {
    const run_cmd_payload *pld;
    int i, sect;
    uint8_t board_count;
    uint64_t mtr_mask;

    init_enables_dirs();

    for (i = 0; i < cmd->hdr.ncmds; i++) {
        pld = cmd->pld + i;
        
        // get the converted board, sector
        board2sector(pld->board, &wr_cmd.board, &wr_cmd.sector);

        DBG_PRINTF(4, "Cobra %d (sm:%d,%d,%d)(lg:%d,%d,%d)",
                pld->cobra, pld->mtr2_run, pld->mtr2_pulse_len, pld->mtr2_steps,
                pld->mtr1_run, pld->mtr1_pulse_len, pld->mtr1_steps);
    
        // 2.4mm
        if (pld->mtr2_run) {
            wr_cmd.motor = cobra2motor(wr_cmd.board, pld->cobra, 1);
            enq_wr_cmd(q, PFS_PULSE_LEN, pld->mtr2_pulse_len);
            enq_wr_cmd(q, PFS_NUM_STEPS, pld->mtr2_steps);
            enq_wr_cmd(q, PFS_NUM_SLEEPS, pld->mtr2_sleeps);
            
            mtr_mask = cobra2mask(wr_cmd.board, pld->cobra, 1);
            enables[wr_cmd.sector][wr_cmd.board] |= mtr_mask;
                    
            if (pld->mtr2_dir) {
                dirs[wr_cmd.sector][wr_cmd.board] |= mtr_mask;
            }
        }
        // 3.4mm
        if (pld->mtr1_run) {
            wr_cmd.motor = cobra2motor(wr_cmd.board, pld->cobra, 0);
            enq_wr_cmd(q, PFS_PULSE_LEN, pld->mtr1_pulse_len);
            enq_wr_cmd(q, PFS_NUM_STEPS, pld->mtr1_steps);
            enq_wr_cmd(q, PFS_NUM_SLEEPS, pld->mtr1_sleeps);
            
            mtr_mask = cobra2mask(wr_cmd.board, pld->cobra, 0);
            enables[wr_cmd.sector][wr_cmd.board] |= mtr_mask;
                    
            if (pld->mtr1_dir) {
                dirs[wr_cmd.sector][wr_cmd.board] |= mtr_mask;
            }
        }
    }
    
    // set step length and start runs
    wr_cmd.motor = CONTROL_MOTOR;
	for (sect = 0; sect < NUM_SECTORS; sect++){
        
        board_count = sectors[sect].board_count;
		for (i = 0; i < board_count; i++) {
			// Drive the boards in reverse order
			wr_cmd.board = board_count - i - 1;
			wr_cmd.sector = sect;
            
            load_enables_dirs(q, i, sect);
            enq_wr_cmd(q, PFS_CTRL_STEP_LEN, cmd->step_len);
            enq_wr_cmd(q, PFS_CTRL_CONTROL, 1<<PFS_CTRL_RUN_BIT);
		}
	}

    return 0;
}

/******************************************************************************/

void hk_response_cb(const motor_cmd *cmd) {
    uint8_t cobra, small;

	if ((cmd->rnw == 1) && (cmd->board == rd_cmd.board) && (cmd->sector == rd_cmd.sector) ) {
		
		if (cmd->motor == ADC_MOTOR) {
            DBG_PRINTF(8, "HK ADC 'Motor' Reply reg %d = %d", cmd->reg, cmd->val);
			
			if (cmd->reg == PFS_TEMP0_REG) {
				hk_data.temp1 = cmd->val;
				hk_adc_flags |= 1;
				
			} else if (cmd->reg == PFS_TEMP1_REG) {
				hk_data.temp2 = cmd->val;
				hk_adc_flags |= 2;
				
			} else if (cmd->reg == PFS_VOLTAGE_REG) {
				hk_data.voltage = cmd->val;
				hk_adc_flags |= 4;
				
			}
			
		} else if ( motor2cobra(cmd->board, cmd->motor, &cobra, &small) ) {
            DBG_PRINTF(8, "HK Motor Reply cobr:%d sm:%d reg %d = %d", 
                    cobra, small, cmd->reg, cmd->val);

            if (cmd->reg == PFS_PULSE_PERIOD) {
                hk_data.freqs[cobra][small] = cmd->val;
				hk_response_count++;
                
            } else if (cmd->reg == PFS_RES_ADC) {
                hk_data.currents[cobra][small] = cmd->val;
				hk_response_count++;
                
            } 
            
		}
		
		//DBG_PRINTF(2, "Hk # resp:%d, ADC flags:%d", hk_response_count, hk_adc_flags);

		// If we've recieved all values
		if ((hk_response_count == 2*2*MAX_COBRAS_PER_BOARD) && (hk_adc_flags >= 0x07)) {
			DBG_PRINTF(8, "HK all freqs & currents received!");
            hk_done = 1;
		}
	}
}


/*******************************************************************************
 * Private function declarations
 ******************************************************************************/
 
static void load_enables_dirs(QUEUE(motor_cmd) *q, uint8_t brd, uint8_t sect) {
    wr_cmd.board = brd;
    wr_cmd.sector = sect;

    enq_wr_cmd(q, PFS_CTRL_MTR_ENA0, (enables[sect][brd] >> 0) & 0xFfff);
    enq_wr_cmd(q, PFS_CTRL_MTR_ENA1, (enables[sect][brd] >> 16) & 0xFfff);
    enq_wr_cmd(q, PFS_CTRL_MTR_ENA2, (enables[sect][brd] >> 32) & 0xFfff);
    enq_wr_cmd(q, PFS_CTRL_MTR_ENA3, (enables[sect][brd] >> 48) & 0xFfff);
    
    enq_wr_cmd(q, PFS_CTRL_MTR_DIR0, (dirs[sect][brd] >> 0) & 0xFfff);
    enq_wr_cmd(q, PFS_CTRL_MTR_DIR0, (dirs[sect][brd] >> 16) & 0xFfff);
    enq_wr_cmd(q, PFS_CTRL_MTR_DIR0, (dirs[sect][brd] >> 32) & 0xFfff);
    enq_wr_cmd(q, PFS_CTRL_MTR_DIR0, (dirs[sect][brd] >> 48) & 0xFfff);
    
}

static void init_enables_dirs() {
    int i, sect;
    for (sect = 0; sect < NUM_SECTORS; sect++){
		for (i = 0; i < BOARDS_PER_SECTOR; i++) {
            enables[sect][i] = 0;
            dirs[sect][i] = 0;
        }
    } 
}

static void enq_wr_cmd(QUEUE(motor_cmd) *q, uint32_t reg, uint32_t val) {
    wr_cmd.reg = reg;
    wr_cmd.val = val;
    q->enq(q, &wr_cmd);
}

static void enq_rd_cmd(QUEUE(motor_cmd) *q, uint32_t reg) {
    rd_cmd.reg = reg;
    q->enq(q, &rd_cmd);
}


static void board2sector(uint8_t tcp_board, uint32_t *board, uint32_t *sect) {
    // note: tcp_board is 0-indexed already
    *sect = 0;
    
    while (tcp_board >= BOARDS_PER_SECTOR) {
        tcp_board -= BOARDS_PER_SECTOR;
        *sect = *sect + 1;
    }
    
    *sect = (*sect >= NUM_SECTORS) ? (NUM_SECTORS-1):*sect;
    *board = tcp_board;
}



